;;;; plisp.lisp
;; reference: https://github.com/runtimeverification/plutus-core-semantics

(in-package #:plisp)

(declaim (optimize safety debug))

(defgeneric emit-plutus (ast)
  (:documentation "Emit the UPLC source code from the given `ast'"))
(defgeneric reduce-plutus (env ast)
  (:documentation "Reduce the plutus `ast' to its normal form in the context `env'"))
(defgeneric to-plutus (v)
  (:documentation "Convert the lisp value `v' to a plutus value"))
(defgeneric from-plutus (v)
  (:documentation "Convert the primitive plutus value `v' to a lisp value"))

;; Builtin types
(defclass plutus-bool ()
  ((value :initarg :value :accessor plutus-bool-value)))
(defclass plutus-integer ()
  ((value :initarg :value :accessor plutus-integer-value)))
(defclass plutus-pair ()
  ((value :initarg :value :accessor plutus-pair-value)))
(defclass plutus-list ()
  ((value :initarg :value :accessor plutus-list-value)))
(defclass plutus-map ()
  ((value :initarg :value :accessor plutus-map-value)))
(defclass plutus-bytestring ()
  ((value :initarg :value :accessor plutus-bytestring-value)))
(defclass plutus-string ()
  ((value :initarg :value :accessor plutus-string-value)))
(defclass plutus-unit ()
  ())

;; Builtin integer functions
(defclass plutus-add-integer ()
  ((a :initarg :a :accessor plutus-add-integer-a)
   (b :initarg :b :accessor plutus-add-integer-b)))
(defclass plutus-multiply-integer ()
  ((a :initarg :a :accessor plutus-multiply-integer-a)
   (b :initarg :b :accessor plutus-multiply-integer-b)))
(defclass plutus-subtract-integer ()
  ((a :initarg :a :accessor plutus-subtract-integer-a)
   (b :initarg :b :accessor plutus-subtract-integer-b)))
(defclass plutus-divide-integer ()
  ((a :initarg :a :accessor plutus-divide-integer-a)
   (b :initarg :b :accessor plutus-divide-integer-b)))
(defclass plutus-mod-integer ()
  ((a :initarg :a :accessor plutus-mod-integer-a)
   (b :initarg :b :accessor plutus-mod-integer-b)))
(defclass plutus-quotient-integer ()
  ((a :initarg :a :accessor plutus-quotient-integer-a)
   (b :initarg :b :accessor plutus-quotient-integer-b)))
(defclass plutus-remainder-integer ()
  ((a :initarg :a :accessor plutus-remainder-integer-a)
   (b :initarg :b :accessor plutus-remainder-integer-b)))
(defclass plutus-less-than-integer ()
  ((a :initarg :a :accessor plutus-less-than-integer-a)
   (b :initarg :b :accessor plutus-less-than-integer-b)))
(defclass plutus-less-than-equals-integer ()
  ((a :initarg :a :accessor plutus-less-than-equals-integer-a)
   (b :initarg :b :accessor plutus-less-than-equals-integer-b)))
(defclass plutus-equals-integer ()
  ((a :initarg :a :accessor plutus-equals-integer-a)
   (b :initarg :b :accessor plutus-equals-integer-b)))

;; Builtin string functions
(defclass plutus-encode-utf8 ()
  ((a :initarg :a :accessor plutus-encode-utf8-a)))
(defclass plutus-decode-utf8 ()
  ((a :initarg :a :accessor plutus-decode-utf8-a)))
(defclass plutus-append-string ()
  ((a :initarg :a :accessor plutus-append-string-a)
   (b :initarg :b :accessor plutus-append-string-b)))
(defclass plutus-equals-string ()
  ((a :initarg :a :accessor plutus-equals-string-a)
   (b :initarg :b :accessor plutus-equals-string-b)))

;; Builtin bytestring functions
(defclass plutus-append-bytestring ()
  ((a :initarg :a :accessor plutus-append-bytestring)
   (b :initarg :b :accessor plutus-append-bytestring)))
(defclass plutus-cons-bytestring ()
  ((a :initarg :a :accessor plutus-cons-bytestring-a)
   (b :initarg :b :accessor plutus-cons-bytestring-b)))
(defclass plutus-slice-bytestring ()
  ((a :initarg :a :accessor plutus-cons-bytestring-a)
   (b :initarg :b :accessor plutus-cons-bytestring-b)
   (c :initarg :c :accessor plutus-cons-bytestring-c)))
(defclass plutus-length-of-bytestring ()
  ((a :initarg :a :accessor plutus-length-of-bytestring)))
(defclass plutus-index-bytestring ()
  ((a :initarg :a :accessor plutus-index-bytestring-a)
   (b :initarg :b :accessor plutus-index-bytestring-b)))
(defclass plutus-equals-bytestring ()
  ((a :initarg :a :accessor plutus-equals-bytestring-a)
   (b :initarg :b :accessor plutus-equals-bytestring-b)))
(defclass plutus-less-than-integer ()
  ((a :initarg :a :accessor plutus-less-than-integer-a)
   (b :initarg :b :accessor plutus-less-than-integer-b)))
(defclass plutus-less-than-equals-integer ()
  ((a :initarg :a :accessor plutus-less-than-equals-integer-a)
   (b :initarg :b :accessor plutus-less-than-equals-integer-b)))

;; Builtin crypto functions
(defclass plutus-sha3-256 ()
  ((a :initarg :a :accessor plutus-sha3-256-a)))
(defclass plutus-sha2-256 ()
  ((a :initarg :a :accessor plutus-sha2-256-a)))
(defclass plutus-blake2b-256 ()
  ((a :initarg :a :accessor plutus-blake2b-256-a)))
(defclass plutus-verify-signature ()
  ((a :initarg :a :accessor plutus-verify-signature-a)
   (b :initarg :b :accessor plutus-verify-signature-b)
   (c :initarg :c :accessor plutus-verify-signature-c)))

;; Builtin pair functions
(defclass plutus-fst-pair ()
  ((a :initarg :a :accessor plutus-fst-pair-a)))
(defclass plutus-snd-pair ()
  ((a :initarg :a :accessor plutus-fst-pair-a)))

;; Builtin list functions ()
(defclass plutus-choose-list ()
  ((a :initarg :a :accessor plutus-choose-list-a)
   (b :initarg :b :accessor plutus-choose-list-b)
   (c :initarg :c :accessor plutus-choose-list-c)))
(defclass plutus-mk-cons ()
  ((a :initarg :a :accessor plutus-mk-cons-a)
   (b :initarg :b :accessor plutus-mk-cons-b)))
(defclass plutus-head-list ()
  ((a :initarg :a :accessor plutus-head-list-a)))
(defclass plutus-tail-list ()
  ((a :initarg :a :accessor plutus-tail-list-a)))
(defclass plutus-null-list ()
  ((a :initarg :a :accessor plutus-null-list-a)))

;; Builtin polymorphic functions
(defclass plutus-if-then-else ()
  ((a :initarg :a :accessor plutus-if-then-else-a)
   (b :initarg :b :accessor plutus-if-then-else-b)
   (c :initarg :c :accessor plutus-if-then-else-c)))
(defclass plutus-choose-unit ()
  ((a :initarg :a :accessor plutus-choose-unit-a)
   (b :initarg :b :accessor plutus-choose-unit-b)))
(defclass plutus-trace ()
  ((a :initarg :a :accessor plutus-trace-a)
   (b :initarg :b :accessor plutus-trace-b)))

;; Builtin data functions
(defclass plutus-choose-data ()
  ((a :initarg :a :accessor plutus-choose-data-a)
   (b :initarg :b :accessor plutus-choose-data-b)
   (c :initarg :c :accessor plutus-choose-data-c)
   (d :initarg :d :accessor plutus-choose-data-d)
   (e :initarg :e :accessor plutus-choose-data-e)))
(defclass plutus-constr-data ()
  ((a :initarg :a :accessor plutus-constr-data-a)
   (b :initarg :b :accessor plutus-constr-data-b)))
(defclass plutus-map-data ()
  ((a :initarg :a :accessor plutus-map-data-a)))
(defclass plutus-list-data ()
  ((a :initarg :a :accessor plutus-list-data-a)))
(defclass plutus-i-data ()
  ((a :initarg :a :accessor plutus-i-data-a)))
(defclass plutus-b-data ()
  ((a :initarg :a :accessor plutus-b-data-a)))
(defclass plutus-un-constr-data ()
  ((a :initarg :a :accessor plutus-un-constr-data-a)))
(defclass plutus-un-map-data ()
  ((a :initarg :a :accessor plutus-un-map-data-a)))
(defclass plutus-un-list-data ()
  ((a :initarg :a :accessor plutus-un-list-data-a)))
(defclass plutus-un-i-data ()
  ((a :initarg :a :accessor plutus-un-i-data-a)))
(defclass plutus-un-b-data ()
  ((a :initarg :a :accessor plutus-un-b-data-a)))
(defclass plutus-equals-data ()
  ((a :initarg :a :accessor plutus-equals-data-a)
   (b :initarg :b :accessor plutus-equals-data-b)))
(defclass plutus-mk-pair-data ()
  ((a :initarg :a :accessor plutus-mk-pair-data-a)
   (b :initarg :b :accessor plutus-mk-pair-data-b)))
(defclass plutus-mk-nil-data ()
  ((a :initarg :a :accessor plutus-mk-nil-data-a)))
(defclass plutus-mk-nil-pair-data ()
  ((a :initarg :a :accessor plutus-mk-nil-pair-data-a)))

;; utils
(defun alistp (alist)
  (and (listp alist)
       (every #'consp alist)))

;; to-plutus implementations:
;; builtin types
(defmethod to-plutus ((b (eql t)))
  (make-instance 'plutus-bool :value t))
(defmethod to-plutus ((b (eql nil)))
  (make-instance 'plutus-bool :value nil))
(defmethod to-plutus ((i integer))
  (make-instance 'plutus-integer :value i))
(defmethod to-plutus ((p cons))
  ;; Possible forms:
  ;; cons  (a . b)               -> plutus-pair
  ;; list  (a b c ...)           -> plutus-list
  ;; alist ((a . b) (c . d) ...) -> plutus-map
  (cond
    ((alistp p)
     (make-instance 'plutus-map :value p))
    ((and (not (consp (cdr p))) (not (null (cdr p))))
     (make-instance 'plutus-pair :value p))
    (t
     (make-instance 'plutus-list :value p))))
(defmethod to-plutus ((u (eql 'unit)))
  (make-instance 'plutus-unit))
(defmethod to-plutus ((b array))
  (make-instance 'plutus-bytestring :value b))
(defmethod to-plutus ((s string))
  (make-instance 'plutus-string :value s))
